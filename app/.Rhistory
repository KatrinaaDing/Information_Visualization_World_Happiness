shiny::runApp()
runApp()
runApp()
runApp()
worldHappiness <- read.csv("/Users/katrinading/Desktop/Uni/postgrad/GEOM90007 iv/asst2/data/World Happiness Reports 2013-2023/WorldHappinessIndex2013-2023.csv")
print(worldHappiness)
runApp('~/Desktop/Uni/postgrad/GEOM90007 iv/asst2/moxue')
installed.packages(bootswatch)
install.packages(bootswatch)
library(shiny); runApp('app copy.R')
View(worldHappiness)
View(worldMap)
getwd()
runApp('app copy.R')
runApp('app copy.R')
worldMap <- readOGR("/private/var/folders/rb/k_cp4hm14m30kkkpg55d22g00000gn/T/MicrosoftEdgeDownloads/3209d76e-b490-4d19-a1e6-b117132665b7/ref-countries-2020-60m.shp/CNTR_BN_60M_2020_3035.shp", "CNTR_BN_60M_2020_3035")
library("shiny")
library("ggplot2")
library("leaflet")
library("ggiraph")
library(maptools)
library(rgdal)
library(dplyr)
library(bslib)
worldMap <- readOGR("/private/var/folders/rb/k_cp4hm14m30kkkpg55d22g00000gn/T/MicrosoftEdgeDownloads/3209d76e-b490-4d19-a1e6-b117132665b7/ref-countries-2020-60m.shp/CNTR_BN_60M_2020_3035.shp", "CNTR_BN_60M_2020_3035")
plot(worldMap)
runApp('app copy.R')
runApp('testmap.R')
library(shiny); runApp('testmap.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
N_country <- unique(worldHappiness$Country)
N_country <- count(unique(worldHappiness$Country))
N_country <- nrows(unique(worldHappiness$Country))
N_country <- nrow(unique(worldHappiness$Country))
N_country <- (unique(worldHappiness$Country))
N_country <- length(unique(worldHappiness$Country))
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
###### Map data
# get country centroid coordinates
dataWithSpatial <- left_join(worldMap, worldHappiness, by = c("name" = "Country"))
### Filter data
worldHappiness <- worldHappiness %>% filter(!is.na(worldHappiness$Index))
###### Map data
# get country centroid coordinates
dataWithSpatial <- left_join(worldMap, worldHappiness, by = c("name" = "Country"))
### Filter data
worldHappiness <- worldHappiness %>% filter(!is.na(worldHappiness$Index))
###### Map data
# get country centroid coordinates
dataWithSpatial <- left_join(worldMap, worldHappiness, by = c("name" = "Country"))
library("dplyr")
###### Map data
# get country centroid coordinates
dataWithSpatial <- left_join(worldMap, worldHappiness, by = c("name" = "Country"))
library("shiny")
library("ggplot2")
library("leaflet")
library("ggiraph")
library("maptools")
library("rgdal")
library("dplyr")
library("bslib")
library("maps")
library("rnaturalearth")
library("sf")
library("htmlwidgets")
library("shinydashboard")
library("shinyWidgets")
###### Map data
# get country centroid coordinates
dataWithSpatial <- left_join(worldMap, worldHappiness, by = c("name" = "Country"))
runApp('app copy.R')
# add icon type
dataWithSpatial$happiness <- cut(
dataWithSpatial$Index,
breaks = c(MIN_INDEX, SAD_THRESHOLD, SAD_THRESHOLD_2, NEUTRAL_THRESHOLD, HAPPY_THRESHOLD, MAX_INDEX),
labels = c("very_sad", "sad", "neutral", "happy", "very_happy"),
include.lowest = TRUE
)
###### Map data
# get country centroid coordinates
dataWithSpatial <- left_join(worldMap, worldHappiness, by = c("name" = "Country"))
dataWithSpatial$centroid <- st_centroid(dataWithSpatial$geometry)
dataWithSpatial$lng <- st_coordinates(dataWithSpatial$centroid)[, "X"]
dataWithSpatial$lat <- st_coordinates(dataWithSpatial$centroid)[, "Y"]
### Import data
worldMap <- st_read("data/countries.geo.json")
worldHappiness <- read.csv("data/World Happiness Reports 2013-2023/WorldHappinessIndex2013-2023.csv")
../
### Import data
worldMap <- st_read("../data/countries.geo.json")
### Import data
worldMap <- st_read("../data/countries.geo.json")
worldHappiness <- read.csv("../data/World Happiness Reports 2013-2023/WorldHappinessIndex2013-2023.csv")
### Filter data
worldHappiness <- worldHappiness %>% filter(!is.na(worldHappiness$Index))
###### Map data
# get country centroid coordinates
dataWithSpatial <- left_join(worldMap, worldHappiness, by = c("name" = "Country"))
dataWithSpatial$centroid <- st_centroid(dataWithSpatial$geometry)
dataWithSpatial$lng <- st_coordinates(dataWithSpatial$centroid)[, "X"]
dataWithSpatial$lat <- st_coordinates(dataWithSpatial$centroid)[, "Y"]
N_COUNTRIES <- length(unique(worldHappiness$Country))
# calculate happiness class
MIN_INDEX <- min(dataWithSpatial$Index, na.rm = TRUE)
MAX_INDEX <- max(dataWithSpatial$Index, na.rm = TRUE)
CLASS <- 5
STEP <- (MAX_INDEX - MIN_INDEX) / CLASS
SAD_THRESHOLD <- MIN_INDEX + STEP
SAD_THRESHOLD_2 <- MIN_INDEX + 2 * STEP
NEUTRAL_THRESHOLD <- MIN_INDEX + 3 * STEP
HAPPY_THRESHOLD <- MIN_INDEX + 4 * STEP
ICON_SIZE <- 18
faceIcons <- iconList(
very_happy = makeIcon("icons/face-grin-beam-solid.svg", "icons/face-grin-beam-solid.svg", ICON_SIZE, ICON_SIZE),
happy = makeIcon("icons/face-smile-solid.svg", "icons/face-smile-solid.svg", ICON_SIZE, ICON_SIZE),
neutral = makeIcon("icons/face-meh-solid.svg", "icons/face-meh-solid.svg", ICON_SIZE, ICON_SIZE),
sad = makeIcon("icons/face-frown-solid.svg", "icons/face-frown-solid.svg", ICON_SIZE, ICON_SIZE),
very_sad = makeIcon("icons/face-sad-tear-solid.svg", "icons/face-sad-tear-solid.svg", ICON_SIZE, ICON_SIZE)
)
# add icon type
dataWithSpatial$happiness <- cut(
dataWithSpatial$Index,
breaks = c(MIN_INDEX, SAD_THRESHOLD, SAD_THRESHOLD_2, NEUTRAL_THRESHOLD, HAPPY_THRESHOLD, MAX_INDEX),
labels = c("very_sad", "sad", "neutral", "happy", "very_happy"),
include.lowest = TRUE
)
View(worldHappiness)
View(dataWithSpatial)
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
install.packages('shinyjs')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
install.packages('fmsb')
library(fmsb)
# Library
library(fmsb)
# Create data: note in High school for Jonathan:
data <- as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
colnames(data) <- c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
data <- rbind(rep(20,10) , rep(0,10) , data)
# Check your data, it has to look like this!
head(data)
# The default radar chart
radarchart(data)
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
data <- rbind(rep(30,10) , rep(0,10) , data)
# Check your data, it has to look like this!
head(data)
# The default radar chart
radarchart(data)
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
data <- rbind(rep(30,10) , rep(0,20) , data)
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
worldHappiness <- read.csv("../data/World Happiness Report 2005-Present.csv")
View(worldHappiness)
### Filter data
worldHappiness <- worldHappiness %>% filter(!is.na(worldHappiness$'Life Laddar'))
worldHappiness <- read.csv("../data/World Happiness Report 2005-Present.csv")
print(head(worldHappiness))
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
### Filter data
worldHappiness <- worldHappiness %>% filter(!is.na(worldHappiness$'Life.Ladder'))
###### Map data
# get country centroid coordinates
dataWithSpatial <- left_join(worldMap, worldHappiness, by = c("name" = "Country.Name"))
dataWithSpatial$centroid <- st_centroid(dataWithSpatial$geometry)
dataWithSpatial$lng <- st_coordinates(dataWithSpatial$centroid)[, "X"]
dataWithSpatial$lat <- st_coordinates(dataWithSpatial$centroid)[, "Y"]
N_COUNTRIES <- length(unique(worldHappiness$'Country.Name'))
View(dataWithSpatial)
View(worldHappiness)
### Import data
worldMap <- st_read("../data/countries.geo.json")
library("shiny")
library("ggplot2")
library("leaflet")
library("ggiraph")
library("maptools")
library("rgdal")
library("dplyr")
library("bslib")
library("maps")
library("rnaturalearth")
library("sf")
library("htmlwidgets")
library("shinydashboard")
library("shinyWidgets")
### Import data
worldMap <- st_read("../data/countries.geo.json")
worldHappiness <- read.csv("../data/World Happiness Report 2005-Present.csv")
### Filter data
worldHappiness <- worldHappiness %>% filter(!is.na(worldHappiness$'Life.Ladder'))
###### Map data
# get country centroid coordinates
dataWithSpatial <- left_join(worldMap, worldHappiness, by = c("name" = "Country.Name"))
View(dataWithSpatial)
### Import data
worldMap <- st_read("../data/countries.geo.json")
View(worldMap)
runApp('app copy.R')
worldHappiness <- read.csv("../data/World Happiness Report 2005-Present.csv")
### Filter data
worldHappiness <- worldHappiness %>% filter(!is.na(worldHappiness$'Life.Ladder'))
###### Map data
# get country centroid coordinates
dataWithSpatial <- left_join(worldMap, worldHappiness, by = c("name" = "Country.Name"))
View(dataWithSpatial)
### Import data
worldMap <- st_read("../data/countries.geo.json")
worldHappiness <- read.csv("../data/World Happiness Report 2005-Present.csv")
### Filter data
worldHappiness <- worldHappiness %>% filter(!is.na(worldHappiness$'Life.Ladder'))
### Filter data
worldHappiness <- worldHappiness %>% filter(!is.na(worldHappiness$'Life.Ladder'))
###### Map data
# get country centroid coordinates
dataWithSpatial <- left_join(worldMap, worldHappiness, by = c("name" = "Country.Name"))
View(worldHappiness)
View(dataWithSpatial)
worldMap <- ne_countries(scale = "medium", returnclass = "sf")
### Import data
worldMap <- st_read("../data/countries.geo.json")
worldMap <- ne_countries(scale = "medium", returnclass = "sf")
###### Map data
# get country centroid coordinates
dataWithSpatial <- left_join(worldMap, worldHappiness, by = c("name" = "Country.Name"))
runApp('app copy.R')
View(worldMap)
View(dataWithSpatial)
View(worldMap)
runApp('app copy.R')
runApp('app copy.R')
### Import data
worldMap <- st_read("../data/countries.geo.json")
worldHappiness <- read.csv("../data/World Happiness Report 2005-Present.csv")
### Filter data
worldHappiness <- worldHappiness %>% filter(!is.na(worldHappiness$'Life.Ladder'))
###### Map data
# get country centroid coordinates
dataWithSpatial <- left_join(worldMap, worldHappiness, by = c("name" = "Country.Name"))
N_COUNTRIES <- length(unique(worldHappiness$'Country.Name'))
worldMap <- ne_countries(scale = "medium", returnclass = "sf")
worldMap <- st_make_valid(worldMap, 4326)
### Import data
#worldMap <- st_read("../data/countries.geo.json")
worldHappiness <- read.csv("../data/World Happiness Report 2005-Present.csv")
### Filter data
worldHappiness <- worldHappiness %>% filter(!is.na(worldHappiness$'Life.Ladder'))
###### Map data
# get country centroid coordinates
dataWithSpatial <- left_join(worldMap, worldHappiness, by = c("name" = "Country.Name"))
dataWithSpatial$centroid <- st_centroid(dataWithSpatial$geometry)
N_COUNTRIES <- length(unique(worldHappiness$'Country.Name'))
N_COUNTRIES <- length(unique(worldHappiness$'Country.Name'))
dataWithSpatial$lng <- st_coordinates(dataWithSpatial$centroid)[, "X"]
dataWithSpatial$lat <- st_coordinates(dataWithSpatial$centroid)[, "Y"]
N_COUNTRIES <- length(unique(worldHappiness$'Country.Name'))
worldMap <- ne_countries(scale = "medium", returnclass = "sf")
worldMap <- st_make_valid(worldMap, 4326)
### Import data
#worldMap <- st_read("../data/countries.geo.json")
worldHappiness <- read.csv("../data/World Happiness Report 2005-Present.csv")
### Filter data
worldHappiness <- worldHappiness %>% filter(!is.na(worldHappiness$'Life.Ladder'))
###### Map data
# get country centroid coordinates
dataWithSpatial <- left_join(worldMap, worldHappiness, by = c("name" = "Country.Name"))
dataWithSpatial$centroid <- st_centroid(dataWithSpatial$geometry)
dataWithSpatial$lng <- st_coordinates(dataWithSpatial$centroid)[, "X"]
dataWithSpatial$lat <- st_coordinates(dataWithSpatial$centroid)[, "Y"]
N_COUNTRIES <- length(unique(worldHappiness$'Country.Name'))
# calculate happiness class
MIN_INDEX <- min(dataWithSpatial$'Life.Ladder', na.rm = TRUE)
MAX_INDEX <- max(dataWithSpatial$'Life.Ladder', na.rm = TRUE)
CLASS <- 5
### Import data
worldMap <- st_read("../data/countries.geo.json")
worldHappiness <- read.csv("../data/World Happiness Report 2005-Present.csv")
### Filter data
worldHappiness <- worldHappiness %>% filter(!is.na(worldHappiness$'Life.Ladder'))
###### Map data
# get country centroid coordinates
dataWithSpatial <- left_join(worldMap, worldHappiness, by = c("name" = "Country.Name"))
dataWithSpatial$centroid <- st_centroid(dataWithSpatial$geometry)
dataWithSpatial$lng <- st_coordinates(dataWithSpatial$centroid)[, "X"]
dataWithSpatial$lat <- st_coordinates(dataWithSpatial$centroid)[, "Y"]
N_COUNTRIES <- length(unique(worldHappiness$'Country.Name'))
runApp('app copy.R')
runApp('app copy.R')
worldMap <- st_transform(worldMap, 4326)
runApp('app copy.R')
runApp('app copy.R')
# calculate happiness class
MIN_INDEX <- min(dataWithSpatial$Index, na.rm = TRUE)
###### Map data
# get country centroid coordinates
dataWithSpatial <- inner_join(worldMap, worldHappiness, by = c("name" = "Country"))
dataWithSpatial$centroid <- st_centroid(dataWithSpatial$geometry)
dataWithSpatial$lng <- st_coordinates(dataWithSpatial$centroid)[, "X"]
dataWithSpatial$lat <- st_coordinates(dataWithSpatial$centroid)[, "Y"]
N_COUNTRIES <- length(unique(worldHappiness$Country))
# calculate happiness class
MIN_INDEX <- min(dataWithSpatial$Index, na.rm = TRUE)
MAX_INDEX <- max(dataWithSpatial$Index, na.rm = TRUE)
CLASS <- 5
STEP <- (MAX_INDEX - MIN_INDEX) / CLASS
worldMap <- ne_countries(scale = "medium", returnclass = "sf")
worldMap <- st_make_valid(worldMap, 4326)
### Import data
#worldMap <- st_read("../data/countries.geo.json")
worldHappiness <- read.csv("../data/World Happiness Reports 2013-2023/WorldHappinessIndex2013-2023.csv")
### Import data
#worldMap <- st_read("../data/countries.geo.json")
worldHappiness <- read.csv("../data/World Happiness Reports 2013-2023/WorldHappinessIndex2013-2023.csv")
### Filter data
worldHappiness <- worldHappiness %>% filter(!is.na(worldHappiness$Index))
###### Map data
# get country centroid coordinates
dataWithSpatial <- inner_join(worldMap, worldHappiness, by = c("name" = "Country"))
dataWithSpatial$centroid <- st_centroid(dataWithSpatial$geometry)
dataWithSpatial$lng <- st_coordinates(dataWithSpatial$centroid)[, "X"]
dataWithSpatial$lat <- st_coordinates(dataWithSpatial$centroid)[, "Y"]
N_COUNTRIES <- length(unique(worldHappiness$Country))
# calculate happiness class
MIN_INDEX <- min(dataWithSpatial$Index, na.rm = TRUE)
MAX_INDEX <- max(dataWithSpatial$Index, na.rm = TRUE)
CLASS <- 5
STEP <- (MAX_INDEX - MIN_INDEX) / CLASS
SAD_THRESHOLD <- MIN_INDEX + STEP
SAD_THRESHOLD_2 <- MIN_INDEX + 2 * STEP
NEUTRAL_THRESHOLD <- MIN_INDEX + 3 * STEP
HAPPY_THRESHOLD <- MIN_INDEX + 4 * STEP
View(worldMap)
worldMap <- worldMap %>% select(c(name, geometry))
View(worldMap)
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
library(ggradar)
library(dplyr)
data <- data.frame(
metrics = c('Metric 1', 'Metric 2', 'Metric 3', 'Metric 4'),
max_value = c(10, 10, 10, 10),
value1 = c(7, 4, 9, 6),
value2 = c(4, 8, 2, 8)
)
ggradar(data)
install.packages('ggradar')
library(ggradar)
library(dplyr)
data <- data.frame(
metrics = c('Metric 1', 'Metric 2', 'Metric 3', 'Metric 4'),
max_value = c(10, 10, 10, 10),
value1 = c(7, 4, 9, 6),
value2 = c(4, 8, 2, 8)
)
ggradar(data)
library(ggplot2)
library(ggiraph)
# Create example data
data <- data.frame(
variable = c("Math", "Science", "English", "History"),
value = c(90, 85, 77, 92)
)
# Add an id for ggiraph
data$id <- seq_len(nrow(data))
# Create the ggplot2 radar chart
p <- ggplot(data, aes(x = variable, y = value, group = 1, tooltip = id)) +
geom_polygon(fill = "blue", alpha = 0.4) +
geom_line(color = "darkblue") +
coord_polar()
# Make it interactive with ggiraph
interactive <- girafe(ggobj = p)
# Print or save the interactive plot
print(interactive)
runApp('app copy.R')
# Create data: note in High school for Jonathan:
data <- as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
colnames(data) <- c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
data <- rbind(rep(30,10) , rep(0,10) , data)
# Check your data, it has to look like this!
head(data)
# The default radar chart
radarchart(data)
runApp('app copy.R')
### Import data
worldMap <- st_read("../data/countries.geo.json")
worldHappiness <- read.csv("../data/World Happiness Report 2005-Present.csv")
### Filter data
worldHappiness <- worldHappiness %>% filter(!is.na(worldHappiness$'Life.Ladder'))
###### Map data
# get country centroid coordinates
dataWithSpatial <- left_join(worldMap, worldHappiness, by = c("name" = "Country.Name"))
dataWithSpatial$centroid <- st_centroid(dataWithSpatial$geometry)
dataWithSpatial$lng <- st_coordinates(dataWithSpatial$centroid)[, "X"]
dataWithSpatial$lat <- st_coordinates(dataWithSpatial$centroid)[, "Y"]
N_COUNTRIES <- length(unique(worldHappiness$'Country.Name'))
# calculate happiness class
MIN_INDEX <- min(dataWithSpatial$'Life.Ladder', na.rm = TRUE)
MAX_INDEX <- max(dataWithSpatial$'Life.Ladder', na.rm = TRUE)
CLASS <- 5
STEP <- (MAX_INDEX - MIN_INDEX) / CLASS
SAD_THRESHOLD <- MIN_INDEX + STEP
SAD_THRESHOLD_2 <- MIN_INDEX + 2 * STEP
NEUTRAL_THRESHOLD <- MIN_INDEX + 3 * STEP
HAPPY_THRESHOLD <- MIN_INDEX + 4 * STEP
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
library(shiny); runApp('app copy.R')
library(shiny); runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
install.packages('rcartocolor')
runApp('app copy.R')
install.packages("rcartocolor")
install.packages("rcartocolor")
library(shiny); runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
library(shiny); runApp('app copy.R')
runApp('app copy.R')
runApp('app copy.R')
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
