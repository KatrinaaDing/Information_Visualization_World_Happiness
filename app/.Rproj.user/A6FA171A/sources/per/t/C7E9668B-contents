# install libraties
list_packages <- c('ggplot2','shiny','lubridate','dplyr','leaflet','maps','plotly','scales','shinydashboard','shinyWidgets')
new_packages <- list_packages[!(list_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)


## import library
library(shiny)
library(dplyr) # dplyr is a grammar of data manipulation, eg select, filter
library(leaflet) 
library(maps)
library(ggplot2)
library(lubridate) #Lubridate is an R package that makes it easier to work with dates and times
library(plotly) # Plotly's R graphing library makes interactive, publication-quality graphs
library(scales) 
library(shinydashboard)
library(shinyWidgets)

############## data pre-processing #############

# read data
accidents <- read.csv("data.csv", header = T) %>%
  filter(Start_Time >= as.Date("2023-01-01") & Start_Time <= as.Date("2023-01-31")
         & Weather_Condition %in% c("Fair","Cloudy","Mostly Cloudy", "Fog","Rain"))

######## MAP page - map ########
state_accidents <- accidents %>% group_by(State) %>% summarise(Num=n())

state_accidents$State <- tolower(state.name[match(state_accidents$State,state.abb)])
map_states <- map("state", fill = TRUE, plot = FALSE)
map_name <- lapply(strsplit(map_states$names,":"),function(x) x[1]) 
total_accidents <- state_accidents$Num[match(map_name,state_accidents$State)]
cpol <- colorNumeric("Greens",na.color = NA,state_accidents$Num)


s_accidents <- accidents %>% group_by(State,Severity) %>% 
  summarise(Num=n(),Lng=mean(Start_Lng),Lat=mean(Start_Lat))


######## MAP page - bar ########
bar_data <- accidents %>% group_by(Severity) %>% summarise(Num=n())


######## MAP page - line ########
line_data <- accidents %>% group_by(date=date(Start_Time)) %>% summarise(Num=n())


######## weather page ########
weather_data <- accidents %>% select(Start_Time,Severity,Weather_Condition)

######## process page ########

#calculate processing time
accidents$process_time_mins <- difftime(accidents$End_Time, accidents$Start_Time, units = "mins")

#filter data and filter out outliers
process_data <- accidents %>% select(State, process_time_mins, Distance.mi.) %>%
  filter(process_time_mins < min(boxplot(accidents$process_time_mins)$out))
process_data$process_time_mins <- as.numeric(process_data$process_time_mins)
process_data$State <- state.name[match(process_data$State,state.abb)]


############## shinny ##########################

# design UI 
ui <- navbarPage(
  theme = bslib::bs_theme(bootswatch = "morph"),
  "Accidents Analysis and Impact",    #app title
  tabPanel(
    "Map Analysis", #panel title" #panel title
    span(h6(
        "This is the total car accidents in the US in 2023 Jan, users could click on the map
        to see details info."),style = "color:white"),
    br(),
    fluidRow(
      valueBoxOutput("total_accidents"),
      #valueBoxOutput("severity1"),
      valueBoxOutput("severity2"),
      #valueBoxOutput("severity3"),
      valueBoxOutput("severity4")
    ),
    br(),
    #map plot
    absolutePanel(
      left = 15, width = "70%", height = "90%", right = 50,
      leafletOutput("map", width = "100%", height = "100%")
    ),
    br(),
    absolutePanel(
      left = "73%", width = "25%", height = "90%",right = 15,
      plotOutput("map_bar", width = "100%", height = "40%"),
      br(),
      plotOutput("map_line", width = "100%", height = "40%")
    )
  ),
  tabPanel(
    "Weather Analysis",
    sidebarLayout(
      sidebarPanel(
        span(h6("This is the total number of car accidents in different weathers in the US 
                in 2023 Jan."),style="color:black"),
        br(),
        span(h6("Users could see the specific number by moving mouse."),style="color:black"),
        br(),
        dateRangeInput(
          inputId = "dates",
          label = h6("Date Range"),
          start = "2023-01-01",
          end = "2023-01-31",
          min = "2023-01-01",
          max = "2023-01-31"
        ),
        
        #picker input control from shinyWidgets
        pickerInput(
          "weather_select", "Weather Selection:",
          choices = unique(weather_data$Weather_Condition),
          selected = unique(weather_data$Weather_Condition),
          multiple = TRUE
        ),
        
        pickerInput(
          "severity_select", "Severity Selection",
          choices = unique(weather_data$Severity),
          selected = unique(weather_data$Severity),
          multiple = TRUE
        )
      ),
      mainPanel(
        tabsetPanel(
          tabPanel("Weather Trend across Date", br(), plotlyOutput("weather_lines")),
          tabPanel("Weather Distribution across Date", br(), plotOutput("rose_chart"))
        )
      )
    )
  ),
  tabPanel(
    "Processing Analysis",
    sidebarLayout(
      sidebarPanel(
        span(h6("This is the Plot of distribtion for processing time of accidents 
        based on different road affected distances in 2023 Jan."),style="color:black"),
        br(),
        span(h6("User can drag slider to see more details."),style="color:black"),
        br(),
        
        #slider input
        sliderInput(
          "bins",
          "Number of Bins:",
          min = 1,
          max = 100,
          value = 30
        ),
        sliderInput(
          "range",
          "Range of Distance:",
          min = 0,
          max = 1,
          value = c(0.1,0.5)
        ),
        selectInput(
          "state","State:", selected = 'California', choices = unique(process_data$State)
        )
      ),
      mainPanel(plotOutput("process_chart"))
    )
  ),
  navbarMenu( #dropdown mean
    "About",
    tabPanel(
      "About visualization",
      br(),
      h2(HTML("<b>Project Description</b>"),style = "text-align:center"),
      br(),
      span(h4("Nowadays, it is very common to see car accidents in 
                      everywhere and many people try to collect much data to 
                      figure out the reasons of these car accidents. In this project, 
                      users could see that how location and weather impact on car 
                      accidents and severity of them, and then drivers can be careful 
                      when they drive to some dangerous places or in special weather 
                      conditions. Apart from this, drivers could estimate processing 
                      time of handling accidents based on length of the road affected by
                      the accident and severity."))
    ),
    tabPanel(
      "About Data",
      
      #HTML element used
      a("Data Source Link",href="https://www.kaggle.com/datasets/sobhanmoosavi/us-accidents"),
      br(),
      dataTableOutput("outputtable")
    )
  )
  
)

# design server logic
server <- function(input, output, session) {
  
  ########### Map page ##########
  
  #map
  output$map <- renderLeaflet({
    
    leaflet(map_states) %>%
      addTiles() %>%
      
      addPolygons(
        stroke = F,
        fillOpacity = 1,
        fillColor = cpol(state_accidents$Num),
        popup = paste("<b>State: </b>", map_name,"<br>",
                      "<b>Total Accidents:</b>", total_accidents)
      ) %>%
      addLegend(
        position = "bottomright",
        pal = cpol,
        values = total_accidents,
        title = "Total Accidents"
      ) %>%
      #using 4 as example then 2 to explain 1/4
      addCircleMarkers(data = s_accidents[s_accidents$Severity == 1,],~Lng,~Lat,~Num^(1/4),
                       stroke = FALSE,group = "Severity 1",fillOpacity = 1,color = "orange") %>%
      addCircleMarkers(data = s_accidents[s_accidents$Severity == 2,],~Lng,~Lat,~Num^(1/4),
                       stroke = FALSE,group = "Severity 2",fillOpacity = 1,color = "yellow") %>%
      addCircleMarkers(data = s_accidents[s_accidents$Severity == 3,],~Lng,~Lat,~Num^(1/4),
                       stroke = FALSE,group = "Severity 3",fillOpacity = 1,color = "blue") %>%
      addCircleMarkers(data = s_accidents[s_accidents$Severity == 4,],~Lng,~Lat,~Num^(1/4),
                       stroke = FALSE,group = "Severity 4",fillOpacity = 1,color = "red") %>%
      addLayersControl(
        position = "bottomright",
        overlayGroups = c("Severity 1","Severity 2","Severity 3","Severity 4"),
        options = layersControlOptions(collapsed = F)
      )
  })
  
  # bar
  output$map_bar <- renderPlot({
    ggplot(bar_data,aes(x=reorder(Severity,Num),y=Num)) + 
      
      geom_bar(stat="identity",fill="lightblue",width=0.5) +
      labs(y="Number of Accidents") +
      geom_text(aes(label = Num)) +
      coord_flip() +
      theme_minimal()
  })
  
  # line
  output$map_line <- renderPlot({
    ggplot(line_data,aes(x=date,y=Num)) +
      geom_line(color="lightblue",size = 1.5) +
      geom_point(color="lightblue",size=3) +
      theme_minimal()
  })
  
  # text 
  output$total_accidents <- renderValueBox({
    valueBox(
      prettyNum(sum(state_accidents$Num),big.mark = ","), " accidents in US"
    )
  })
  
 #  output$severity1 <- renderValueBox({
 #   valueBox(
 #     prettyNum(sum(s_accidents[s_accidents$Severity == 1,]$Num),big.mark = ","), "accidents of Severity 1",
 #     color = "purple"
 #   )
 # })
  
  output$severity2 <- renderValueBox({
    valueBox(
      prettyNum(sum(s_accidents[s_accidents$Severity == 2,]$Num),big.mark = ","), "accidents of Severity 2"
    )
  })
  
  #output$severity3 <- renderValueBox({
  #  valueBox(
  #    prettyNum(sum(s_accidents[s_accidents$Severity == 3,]$Num),big.mark = ","), "accidents of Severity 3",
  #    color = "purple"
  #  )
  #})
  
  output$severity4 <- renderValueBox({
    valueBox(
      prettyNum(sum(s_accidents[s_accidents$Severity == 4,]$Num),big.mark = ","), "accidents of Severity 4"
    )
  })
  
  ########### weather page -- multi-lines ##########
  
  #filter data
  weather_filter <- reactive({
    filter(
      weather_data, Weather_Condition %in% input$weather_select 
      & Start_Time >= as.Date(input$dates[1],"%Y-%m-%d") 
      & Start_Time <= as.Date(input$dates[2],"%Y-%m-%d")
      & Severity %in% input$severity_select 
    ) %>% group_by(
      date = date(Start_Time),Weather_Condition
    ) %>% summarise(Num=n())
  })
  
  # multi-lines
  output$weather_lines <- renderPlotly({
    ##  future data management likely produce errors without ungroup(). Always ungroup() after finished calculations.
    weather_filter() %>% ungroup() %>%
      plot_ly(
        x = ~date,
        y = ~Num,
        color = ~Weather_Condition,
        type = "scatter",
        mode = "lines+markers",
        line = list(width = 4, dash = 'dot'),
        hovertemplate = paste('<b>Date</b>: %{x}',
                              '<b>Accidetns</b>: %{y}')
      ) %>%
      layout(title = "Total Accidents in Weathers")
  })
  
  # rose chart
  output$rose_chart <- renderPlot({
    ggplot(weather_filter(), aes(x = date, y = Num, fill = Weather_Condition)) +
      geom_bar(stat = "identity", colour = "black",size = 0.1) +
      scale_fill_brewer(palette = "Greens") +
      coord_polar() +
      scale_y_continuous(labels = comma) #comma using scales library
  })
  
  
  ########### process page ##########
  
  #filter input
  process_filter <- reactive({
    filter(
      process_data, Distance.mi. >= input$range[1] & Distance.mi. <= input$range[2]
      & State == input$state
    )
  })
  
  output$process_chart <- renderPlot({
    x <- process_filter()$process_time_mins
    bins <- seq(min(x), max(x), length.out = input$bins)
    hist(x, breaks = bins, col = "lightblue", border = 'white',
         main = "Processing Time of all Accidents",
         xlab = "Processing Time")
  })
  
  ########### about data ##########
  output$outputtable <- renderDataTable({
    accidents
  })
}

shinyApp(ui, server)