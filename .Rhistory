library(shiny); runApp('app/app copy.R')
library("shiny")
library("ggplot2")
library("leaflet")
library("ggiraph")
library(maptools)
library(rgdal)
library(dplyr)
library(bslib)
library(maps)
library(rnaturalearth)
# worldMap <- readOGR("/private/var/folders/rb/k_cp4hm14m30kkkpg55d22g00000gn/T/MicrosoftEdgeDownloads/3209d76e-b490-4d19-a1e6-b117132665b7/ref-countries-2020-60m.shp/CNTR_BN_60M_2020_3035.shp", "CNTR_BN_60M_2020_3035")
worldMap <- ne_countries(scale = "medium", returnclass = "sf")
install.packages("rnaturalearthdata")
library(rnaturalearth)
# worldMap <- readOGR("/private/var/folders/rb/k_cp4hm14m30kkkpg55d22g00000gn/T/MicrosoftEdgeDownloads/3209d76e-b490-4d19-a1e6-b117132665b7/ref-countries-2020-60m.shp/CNTR_BN_60M_2020_3035.shp", "CNTR_BN_60M_2020_3035")
worldMap <- ne_countries(scale = "medium", returnclass = "sf")
View(worldMap)
worldHappiness <- read.csv("../data/World Happiness Reports 2013-2023/WorldHappinessIndex2013-2023.csv")
getwd()
worldHappiness <- read.csv("data/World Happiness Reports 2013-2023/WorldHappinessIndex2013-2023.csv")
View(worldHappiness)
# worldHappiness <- worldHappiness[complete.cases(worldHappiness$Life.Ladder, worldHappiness$Year), ]
# worldHappiness$Year <- as.numeric(as.character(worldHappiness$Year))
# worldHappiness$Rank <- ave(worldHappiness$Life.Ladder, worldHappiness$Year, FUN = function(x) rank(-x))
joined_data <- left_join(worldMap, worldHappiness, by = c("name" = "Country"))
View(joined_data)
View(joined_data)
View(worldHappiness)
View(worldHappiness)
View(joined_data)
runApp('app/app copy.R')
getwd()
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
print(head(joined_data))
runApp('app/app copy.R')
View(worldHappiness)
View(worldMap)
View(worldMap[[64]][[0]])
# worldMap <- readOGR("/private/var/folders/rb/k_cp4hm14m30kkkpg55d22g00000gn/T/MicrosoftEdgeDownloads/3209d76e-b490-4d19-a1e6-b117132665b7/ref-countries-2020-60m.shp/CNTR_BN_60M_2020_3035.shp", "CNTR_BN_60M_2020_3035")
#worldMap <- ne_countries(scale = "medium", returnclass = "sf")
worldMap <- st_read('../data/countries.geo.json')
runApp('app/app copy.R')
# worldMap <- readOGR("/private/var/folders/rb/k_cp4hm14m30kkkpg55d22g00000gn/T/MicrosoftEdgeDownloads/3209d76e-b490-4d19-a1e6-b117132665b7/ref-countries-2020-60m.shp/CNTR_BN_60M_2020_3035.shp", "CNTR_BN_60M_2020_3035")
#worldMap <- ne_countries(scale = "medium", returnclass = "sf")
worldMap <- st_read("../data/countries.geo.json")
# worldMap <- readOGR("/private/var/folders/rb/k_cp4hm14m30kkkpg55d22g00000gn/T/MicrosoftEdgeDownloads/3209d76e-b490-4d19-a1e6-b117132665b7/ref-countries-2020-60m.shp/CNTR_BN_60M_2020_3035.shp", "CNTR_BN_60M_2020_3035")
#worldMap <- ne_countries(scale = "medium", returnclass = "sf")
worldMap <- st_read("../data/countries.geojson")
# worldMap <- readOGR("/private/var/folders/rb/k_cp4hm14m30kkkpg55d22g00000gn/T/MicrosoftEdgeDownloads/3209d76e-b490-4d19-a1e6-b117132665b7/ref-countries-2020-60m.shp/CNTR_BN_60M_2020_3035.shp", "CNTR_BN_60M_2020_3035")
#worldMap <- ne_countries(scale = "medium", returnclass = "sf")
print(getwd())
worldMap <- st_read("data/countries.geo.json")
worldHappiness <- read.csv("../data/World Happiness Reports 2013-2023/WorldHappinessIndex2013-2023.csv")
worldHappiness <- read.csv("data/World Happiness Reports 2013-2023/WorldHappinessIndex2013-2023.csv")
View(worldMap)
runApp('app/app copy.R')
joined_data <- left_join(worldMap, worldHappiness, by = c("name" = "Country"))
View(joined_data)
plot(joined_data)
plot(joined_data$Rank)
plot(joined_data)
plot(joined_data)
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
library(shiny); runApp('app/app copy.R')
library(shiny); runApp('app/app copy.R')
###### Map data
# get country centroid coordinates
dataWithSpatial <- left_join(worldMap, worldHappiness, by = c("name" = "Country"))
dataWithSpatial$centroid <- st_centroid(dataWithSpatial$geometry)
dataWithSpatial$lng <- st_coordinates(dataWithSpatial$centroid)[, "X"]
dataWithSpatial$lat <- st_coordinates(dataWithSpatial$centroid)[, "Y"]
MIN_INDEX <- min(dataWithSpatial$Index, na.rm = TRUE)
MAX_INDEX <- max(dataWithSpatial$Index, na.rm = TRUE)
CLASS <- 5
STEP <- (MAX_INDEX - MIN_INDEX) / CLASS
SAD_THREAHSOLD <- MIN_INDEX + STEP
HAPPY_THRESHOLD <- MAX_INDEX - STEP
MIN_INDEX <- min(dataWithSpatial$Index, na.rm = TRUE)
MAX_INDEX <- max(dataWithSpatial$Index, na.rm = TRUE)
CLASS <- 5
STEP <- (MAX_INDEX - MIN_INDEX) / CLASS
SAD_THRESHOLD <- MIN_INDEX + STEP
SAD_THRESHOLD_2 <- MIN_INDEX + 2 * STEP
NEUTRAL_THRESHOLD <- MIN_INDEX + 3 * STEP
HAPPY_THRESHOLD <- MIN_INDEX + 4 * STEP
HAPPY_THRESHOLD_2 <- MIN_INDEX + 5 * STEP
### Import data
worldMap <- st_read("../data/countries.geo.json")
worldHappiness <- read.csv("../data/World Happiness Reports 2013-2023/WorldHappinessIndex2013-2023.csv")
### Filter data
worldHappiness <- worldHappiness %>% filter(!is.na(worldHappiness$Index))
###### Map data
# get country centroid coordinates
dataWithSpatial <- left_join(worldMap, worldHappiness, by = c("name" = "Country"))
dataWithSpatial$centroid <- st_centroid(dataWithSpatial$geometry)
dataWithSpatial$lng <- st_coordinates(dataWithSpatial$centroid)[, "X"]
dataWithSpatial$lat <- st_coordinates(dataWithSpatial$centroid)[, "Y"]
MIN_INDEX <- min(dataWithSpatial$Index, na.rm = TRUE)
MAX_INDEX <- max(dataWithSpatial$Index, na.rm = TRUE)
CLASS <- 5
STEP <- (MAX_INDEX - MIN_INDEX) / CLASS
SAD_THRESHOLD <- MIN_INDEX + STEP
SAD_THRESHOLD_2 <- MIN_INDEX + 2 * STEP
NEUTRAL_THRESHOLD <- MIN_INDEX + 3 * STEP
HAPPY_THRESHOLD <- MIN_INDEX + 4 * STEP
MIN_INDEX <- min(dataWithSpatial$Index, na.rm = TRUE)
###### Map data
# get country centroid coordinates
dataWithSpatial <- left_join(worldMap, worldHappiness, by = c("name" = "Country"))
### Import data
worldMap <- st_read("../data/countries.geo.json")
worldHappiness <- read.csv("../data/World Happiness Reports 2013-2023/WorldHappinessIndex2013-2023.csv")
### Filter data
worldHappiness <- worldHappiness %>% filter(!is.na(worldHappiness$Index))
###### Map data
# get country centroid coordinates
dataWithSpatial <- left_join(worldMap, worldHappiness, by = c("name" = "Country"))
dataWithSpatial$centroid <- st_centroid(dataWithSpatial$geometry)
dataWithSpatial$lng <- st_coordinates(dataWithSpatial$centroid)[, "X"]
### Import data
worldMap <- st_read("../data/countries.geo.json")
### Import data
worldMap <- st_read("data/countries.geo.json")
worldHappiness <- read.csv("data/World Happiness Reports 2013-2023/WorldHappinessIndex2013-2023.csv")
### Filter data
worldHappiness <- worldHappiness %>% filter(!is.na(worldHappiness$Index))
###### Map data
# get country centroid coordinates
dataWithSpatial <- left_join(worldMap, worldHappiness, by = c("name" = "Country"))
dataWithSpatial$centroid <- st_centroid(dataWithSpatial$geometry)
dataWithSpatial$lng <- st_coordinates(dataWithSpatial$centroid)[, "X"]
dataWithSpatial$lat <- st_coordinates(dataWithSpatial$centroid)[, "Y"]
MIN_INDEX <- min(dataWithSpatial$Index, na.rm = TRUE)
MAX_INDEX <- max(dataWithSpatial$Index, na.rm = TRUE)
CLASS <- 5
STEP <- (MAX_INDEX - MIN_INDEX) / CLASS
SAD_THRESHOLD <- MIN_INDEX + STEP
SAD_THRESHOLD_2 <- MIN_INDEX + 2 * STEP
NEUTRAL_THRESHOLD <- MIN_INDEX + 3 * STEP
HAPPY_THRESHOLD <- MIN_INDEX + 4 * STEP
library(shiny); runApp('app/app copy.R')
library(shiny); runApp('app/app copy.R')
library(shiny); runApp('app/app copy.R')
library(shiny); runApp('app/app copy.R')
library(shiny); runApp('app/app copy.R')
library(shiny); runApp('app/app copy.R')
library(shiny); runApp('app/app copy.R')
library(shiny); runApp('app/app copy.R')
library(shiny); runApp('app/app copy.R')
library(shiny); runApp('app/app copy.R')
runApp('app/app copy.R')
library(shiny); runApp('app/app copy.R')
library(shiny); runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
library(shiny); runApp('app/app copy.R')
runApp('app/app copy.R')
### Import data
worldMap <- st_read("../data/countries.geo.json")
worldHappiness <- read.csv("../data/World Happiness Reports 2013-2023/WorldHappinessIndex2013-2023.csv")
### Filter data
worldHappiness <- worldHappiness %>% filter(!is.na(worldHappiness$Index))
### Import data
worldMap <- st_read("../data/countries.geo.json")
worldHappiness <- read.csv("../data/World Happiness Reports 2013-2023/WorldHappinessIndex2013-2023.csv")
### Import data
worldMap <- st_read("data/countries.geo.json")
worldHappiness <- read.csv("data/World Happiness Reports 2013-2023/WorldHappinessIndex2013-2023.csv")
runApp('app/app copy.R')
###### Map data
# get country centroid coordinates
dataWithSpatial <- left_join(worldMap, worldHappiness, by = c("name" = "Country"))
dataWithSpatial$centroid <- st_centroid(dataWithSpatial$geometry)
dataWithSpatial$lng <- st_coordinates(dataWithSpatial$centroid)[, "X"]
dataWithSpatial$lat <- st_coordinates(dataWithSpatial$centroid)[, "Y"]
runApp('app/app copy.R')
MIN_INDEX <- min(dataWithSpatial$Index, na.rm = TRUE)
MAX_INDEX <- max(dataWithSpatial$Index, na.rm = TRUE)
CLASS <- 5
STEP <- (MAX_INDEX - MIN_INDEX) / CLASS
SAD_THRESHOLD <- MIN_INDEX + STEP
SAD_THRESHOLD_2 <- MIN_INDEX + 2 * STEP
NEUTRAL_THRESHOLD <- MIN_INDEX + 3 * STEP
HAPPY_THRESHOLD <- MIN_INDEX + 4 * STEP
##### Icon data
# add icon type
dataWithSpatial$happiness <- cut(
dataWithSpatial$Index,
breaks = c(MIN_INDEX, SAD_THRESHOLD, SAD_THRESHOLD_2, NEUTRAL_THRESHOLD, HAPPY_THRESHOLD, MAX_INDEX),
labels = c("very_sad", "sad", "natural", "happy", "very_happy"),
include.lowest = TRUE
)
faceIcons <- iconList(
very_happy = makeIcon("icons/face-grin-beam-regular.svg", "icons/face-grin-beam-regular.svg", ICON_SIZE, ICON_SIZE),
happy = makeIcon("icons/face-smile-regular.svg", "icons/face-smile-regular.svg", ICON_SIZE, ICON_SIZE),
natural = makeIcon("icons/face-meh-regular.svg", "icons/face-meh-regular.svg", ICON_SIZE, ICON_SIZE),
sad = makeIcon("icons/face-frown-regular.svg", "icons/face-frown-regular.svg", ICON_SIZE, ICON_SIZE),
very_sad = makeIcon("icons/face-sad-tear-regular.svg", "icons/face-sad-tear-regular.svg", ICON_SIZE, ICON_SIZE)
)
ICON_SIZE <- 18
faceIcons <- iconList(
very_happy = makeIcon("icons/face-grin-beam-regular.svg", "icons/face-grin-beam-regular.svg", ICON_SIZE, ICON_SIZE),
happy = makeIcon("icons/face-smile-regular.svg", "icons/face-smile-regular.svg", ICON_SIZE, ICON_SIZE),
natural = makeIcon("icons/face-meh-regular.svg", "icons/face-meh-regular.svg", ICON_SIZE, ICON_SIZE),
sad = makeIcon("icons/face-frown-regular.svg", "icons/face-frown-regular.svg", ICON_SIZE, ICON_SIZE),
very_sad = makeIcon("icons/face-sad-tear-regular.svg", "icons/face-sad-tear-regular.svg", ICON_SIZE, ICON_SIZE)
)
runApp('app/app copy.R')
library(shiny); runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
library(shiny); runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
library(shiny); runApp('app/app copy.R')
library(shiny); runApp('app/app copy.R')
library(shiny); runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
### Import data
worldMap <- st_read("data/countries.geo.json")
worldHappiness <- read.csv("data/World Happiness Reports 2013-2023/WorldHappinessIndex2013-2023.csv")
### Filter data
worldHappiness <- worldHappiness %>% filter(!is.na(worldHappiness$Index))
world_avg <- worldHappiness %>%
group_by(Year) %>%
summarise(Avg_Rank = mean(Rank, na.rm = TRUE))
View(world_avg)
runApp('app/app copy.R')
View(world_avg)
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
library(shiny); runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
library(shiny); runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
runApp('app/app copy.R')
